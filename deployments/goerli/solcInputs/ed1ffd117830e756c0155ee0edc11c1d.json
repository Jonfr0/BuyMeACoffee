{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/BuyMeACoffee.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\ncontract BuyMeACoffee {\r\n\r\n    using PriceConverter for uint;\r\n\r\n    //Fund\r\n    uint public constant MINIMUM_USD = 50 * 10**18;\r\n    address[] private funders;\r\n    mapping(address => uint256) private addressToAmountFunded;\r\n    AggregatorV3Interface public priceFeed;\r\n    address public owner;\r\n    uint public clientCount = 0;\r\n    uint public totalAmount = 0;\r\n\r\n    mapping(address => uint) public totalDonatedUser;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"User not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier validateIdCoffees(uint id) {\r\n        require(id < clientCount, \"Client doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    Client[] public Coffees;\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;      \r\n    }\r\n\r\n    function getCoffeeList() public view returns(Client[] memory){\r\n        return Coffees;\r\n    }\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n\r\n    function fund() public payable {\r\n        require( msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\"You need to spend more ETH!\");\r\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n        funders.push(msg.sender);\r\n    }\r\n\r\n\r\n\r\n\r\n    struct Client {\r\n        uint id;\r\n        string name;\r\n        string description;\r\n        string urlImg;\r\n        uint tipAmount;\r\n        address payable wallet;\r\n    }\r\n\r\n    event ClientCreated(\r\n        uint indexed userId,\r\n        string _name,\r\n        string _description,\r\n        string _urlId,\r\n        address payable wallet\r\n    );\r\n\r\n    function CreateUser(\r\n        string memory _name, \r\n        string memory _description,\r\n        string memory _urlImg,\r\n        address payable wallet\r\n        ) public onlyOwner {\r\n            require(wallet != address(0));\r\n            Client memory _Client = Client(\r\n                clientCount,\r\n                _name,\r\n                _description,\r\n                _urlImg,\r\n                0,\r\n                wallet\r\n            );\r\n            \r\n            Coffees.push(_Client);\r\n            emit ClientCreated(clientCount, _name, _description, _urlImg, wallet);\r\n            clientCount++;\r\n        }\r\n        function tipCoffee(uint _id) public payable validateIdCoffees(_id) {\r\n            Client memory _Client = Coffees[_id];\r\n            address payable _user = _Client.wallet;\r\n            _Client.tipAmount += msg.value;\r\n            totalAmount = totalAmount + msg.value;\r\n            totalDonatedUser[msg.sender] += msg.value;\r\n            transferEth(_user, msg.value);\r\n\r\n\r\n        }\r\n        function transferEth(address _to, uint amount) internal {\r\n            require(amount > 0);\r\n            (bool success, ) = _to.call{value: amount}(\"\");\r\n            require(success);\r\n        }\r\n}\r\n"
    },
    "contracts/Counter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract Counter {\r\n\r\n    address public owner; //\r\n    uint counter = 0;\r\n    string ownerName;\r\n\r\n    mapping(address => uint) public userIncrements;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name) {\r\n        owner = msg.sender;\r\n        ownerName = name;\r\n    }\r\n\r\n    function incrementCount(uint number) public {\r\n        userIncrements[msg.sender] += 1;\r\n        counter += number;\r\n    }\r\n\r\n\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getCount() public view returns(uint){\r\n        return counter;\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n  function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint) {\r\n      (, int256 answer, , ,) = priceFeed.latestRoundData();\r\n      return uint(answer * 10000000000);\r\n  }\r\n\r\n  // 1000000000\r\n  // call it get fiatConversionRate, since it assumes something about decimals\r\n  // It wouldn't work for every aggregator\r\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n      uint256 ethPrice = getPrice(priceFeed);\r\n      uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n      // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n      return ethAmountInUsd;\r\n  }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}